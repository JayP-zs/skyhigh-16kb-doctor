/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Gradle plugin project to get you started.
 * For more details on writing Custom Plugins, please refer to https://docs.gradle.org/8.13/userguide/custom_plugins.html in the Gradle documentation.
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    // Apply the Java Gradle plugin development plugin to add support for developing Gradle plugins
    `java-gradle-plugin`
    `kotlin-dsl`
    `maven-publish`
    signing
    id("com.gradle.plugin-publish") version "1.2.1"
    kotlin("jvm") version "1.9.20"
    id("org.jetbrains.kotlin.plugin.serialization") version "1.9.20"
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

group = "com.sparrow.skyhigh"
version = "1.0.0"

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

kotlin {
    jvmToolchain(21)
}

dependencies {
    implementation(gradleApi())
    implementation("org.jetbrains.kotlin:kotlin-stdlib:1.9.20")
    implementation("org.jetbrains.kotlinx:kotlinx-serialization-json:1.6.3")

    testImplementation("org.junit.jupiter:junit-jupiter:5.10.0")
    testImplementation("io.mockk:mockk:1.13.8")
    testImplementation(gradleTestKit())
    testImplementation("org.assertj:assertj-core:3.24.2")
}

sourceSets {
    main {
        resources.srcDirs("src/main/resources")
        java.setSrcDirs(listOf("src/main/kotlin"))
    }
}


testing {
    suites {
        // Configure the built-in test suite
        val test by getting(JvmTestSuite::class) {
            // Use Kotlin Test test framework
            useKotlinTest("2.1.0")
        }

        // Create a new test suite
        val functionalTest by registering(JvmTestSuite::class) {
            // Use Kotlin Test test framework
            useKotlinTest("2.1.0")

            dependencies {
                // functionalTest test suite depends on the production code in tests
                implementation(project())
            }

            targets {
                all {
                    // This test suite should run after the built-in test suite has run its tests
                    testTask.configure { shouldRunAfter(test) } 
                }
            }
        }
    }
}

gradlePlugin {
    website.set("https://github.com/sparrow007/skyhigh-16kb-doctor")
    vcsUrl.set("https://github.com/sparrow007/skyhigh-16kb-doctor")

    plugins {
        create("skyhighDoctorPlugin") {
            id = "com.sparrow.skyhigh.16kb-doctor"
            implementationClass = "com.sparrow.plugin.SkyHighDoctorPlugin"
            displayName = "SkyHigh 16KB Page Alignment Doctor"
            description = "Gradle plugin to scan Android apps for 16KB page alignment compatibility"
            tags.set(listOf("android", "kotlin", "plugin", "16kb", "page-alignment", "doctor"))
        }
    }
}

gradlePlugin.testSourceSets.add(sourceSets["functionalTest"])

tasks.named<Task>("check") {
    // Include functionalTest as part of the check lifecycle
    dependsOn(testing.suites.named("functionalTest"))
}

tasks.test {
    useJUnitPlatform()
}

publishing {
    publications {
        create<MavenPublication>("maven") {
            from(components["java"])

            pom {
                name.set("SkyHigh 16KB Page Alignment Doctor")
                description.set("Gradle plugin to scan Android apps for 16KB page alignment compatibility")
                url.set("https://github.com/sparrow007/skyhigh-16kb-doctor")

                licenses {
                    license {
                        name.set("The Apache License, Version 2.0")
                        url.set("http://www.apache.org/licenses/LICENSE-2.0.txt")
                    }
                }

                developers {
                    developer {
                        id.set("sparrow007")
                        name.set("Supercoder Team")
                        email.set("ankit.steven007@gmail.com")
                    }
                }

                scm {
                    connection.set("scm:git:git://github.com/sparrow007/skyhigh-16kb-doctor.git")
                    developerConnection.set("scm:git:ssh://github.com:sparrow007/skyhigh-16kb-doctor.git")
                    url.set("https://github.com/sparrow007/skyhigh-16kb-doctor")
                }
            }
        }

        repositories {
            maven {
                name = "OSSRH"
                url = uri("https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/")
                credentials {
                    username = project.findProperty("ossrh.username")?.toString()
                        ?: System.getenv("OSSRH_USERNAME")
                    password = project.findProperty("ossrh.password")?.toString()
                        ?: System.getenv("OSSRH_PASSWORD")
                }
            }
        }
    }
}

signing {
    val signingKey = project.findProperty("signing.key")?.toString() ?: System.getenv("GPG_PRIVATE_KEY")
    val signingPassword = project.findProperty("signing.password")?.toString() ?: System.getenv("GPG_PASSPHRASE")

    if (signingKey != null && signingPassword != null) {
        useInMemoryPgpKeys(signingKey, signingPassword)
        sign(publishing.publications["maven"])
    }
}

tasks.withType<Sign>().configureEach {
    onlyIf { project.hasProperty("signing.key") || System.getenv("GPG_PRIVATE_KEY") != null }
}
